openapi: 3.0.1
info:
  title: ToDo API
  version: 1.0.0
paths:
  /task:
    get:
      summary: Return a certain task.
      parameters:
        - name: UUID
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a new task.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/task_post_request'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update an existing task.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/task_put_request'
      responses:
        '204':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a certain task.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/task_delete_request'
      responses:
        '204':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tasks:
    get:
      summary: Return list of tasks.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tasks_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete all tasks.
      responses:
        '204':
          description: OK
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /login:
    post:
      security: []
      summary: Authorize user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login_request'
      responses:
        '200':
          description: OK
        '403':
          description: Wrong login or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /logout:
    delete:
      summary: Delete current session.
      responses:
        '204':
          description: OK
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /register:
    post:
      security: []
      summary: Register new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/register_request'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Login already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


components:
  schemas:
    Error:
      type: object
      properties:
        summary:
          type: string
        description:
          type: string

    Task:
      type: object
      properties:
        uuid:
          type: string
        title:
          type: string

    task_post_request:
      type: object
      properties:
        title:
          type: string
    task_put_request:
      type: object
      properties:
        uuid:
          type: string
        new_title:
          type: string
    task_delete_request:
      type: object
      properties:
        uuid:
          type: string

    tasks_response:
      type: array
      items:
        $ref: '#/components/schemas/Task'

    login_request:
      type: object
      properties:
        login:
          type: string
        password:
          type: string

    register_request:
      type: object
      properties:
        name:
          type: string
        login:
          type: string
        password:
          type: string


  securitySchemes:
    cookieAuthentication:
      type: apiKey
      in: cookie
      name: session


security:
  - cookieAuthentication: []